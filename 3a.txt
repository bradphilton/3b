#include<stdio.h>
#include<stdlib.h>
#include<conio.h>  // for clrscr() and getch()

struct node {
    int info;
    struct node *ptr;
} *top, *temp;

int topelement();
void push(int data);
void pop();
void empty();
void display();
void destroy();
void stack_count();
void create();
int count = 0;

void main() {
    int no, ch, e;
    
    clrscr();  // Clears the screen

    printf("\n1 - Push");
    printf("\n2 - Pop");
    printf("\n3 - Top");
    printf("\n4 - Empty");
    printf("\n5 - Exit");
    printf("\n6 - Display");
    printf("\n7 - Stack Count");
    printf("\n8 - Destroy Stack");

    create();

    while (1) {
        printf("\nEnter choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &no);
                push(no);
                break;
            case 2:
                pop();
                break;
            case 3:
                if (top == NULL)
                    printf("No element in stack\n");
                else {
                    e = topelement();
                    printf("\nTop element: %d\n", e);
                }
                break;
            case 4:
                empty();
                break;
            case 5:
                exit(0);
            case 6:
                display();
                break;
            case 7:
                stack_count();
                break;
            case 8:
                destroy();
                break;
            default:
                printf("Wrong choice, please enter the right choice:\n");
                break;
        }
    }

    getch();  // Pauses the output
}

void create() {
    top = NULL;
}

void stack_count() {
    printf("\nNo. of elements: %d", count);
}

void push(int data) {
    if (top == NULL) {
        top = (struct node *)malloc(sizeof(struct node));
        top->ptr = NULL;
        top->info = data;
    } else {
        temp = (struct node *)malloc(sizeof(struct node));
        temp->ptr = top;
        temp->info = data;
        top = temp;
    }
    count++;
}

void display() {
    struct node *top1 = top;
    if (top1 == NULL) {
        printf("Stack is empty\n");
        return;
    }
    while (top1 != NULL) {
        printf("%d ", top1->info);
        top1 = top1->ptr;
    }
    printf("\n");
}

void pop() {
    struct node *top1;
    if (top == NULL) {
        printf("\nError: Trying to pop from an empty stack\n");
        return;
    } else {
        top1 = top->ptr;
        printf("\nPopped value: %d", top->info);
        free(top);
        top = top1;
        count--;
    }
}

int topelement() {
    return (top->info);
}

void empty() {
    if (top == NULL)
        printf("\nStack is empty\n");
    else
        printf("\nStack is not empty, contains %d elements\n", count);
}

void destroy() {
    struct node *top1;
    while (top != NULL) {
        top1 = top->ptr;
        free(top);
        top = top1;
    }
    printf("\nAll stack elements destroyed\n");
    count = 0;
    top = NULL;
}
